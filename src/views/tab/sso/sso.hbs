<!--
// Copyright (c) Microsoft Corporation
// All rights reserved.
//
// MIT License:
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<html>

<head>
    <title>SSO Authentication Sample</title>
</head>

<body>
    <p>
        This sample shows the basics of an single sign-on authentication flow in a Microsoft Teams tab.
    </p>
    <p>
        The "Grant access to Microsoft Graph" button will appear only if additional consent is required.
    </p>

    <!-- Login button -->
    <button id="btnSSO" style="display: none" onclick="showUserInformationUsingSSO()">Single Sign-On</button>
    <p id="divError" style="display: none" class="auth-data"></p>

    <!-- Result -->

    <h2>Claims from SSO access_token</h2>
    <div id="divAccessTokenError" style="display: none" class="auth-data"></div>
    <div id="divAccessTokenClaims" style="display: none" class="auth-data"></div>
    <p id="divRawAccessToken" style="display: none" class="auth-data"></p>

    <h2>Profile from Microsoft Graph (via On-Behalf-Of flow)</h2>
    <button id="btnGraphAccess" onclick="loginV2()" style="display: none">Grant access to Microsoft Graph</button>
    <div id="divGraphProfileError" style="display: none" class="auth-data"></div>
    <div id="divGraphProfile" style="display: none" class="auth-data"></div>

    <h2>Profile from account(s) linked through the bot</h2>
    <div id="divBotProfilesError" style="display: none" class="auth-data"></div>
    <div id="divBotProfiles" style="display: none" class="auth-data"></div>
    <p>&nbsp;</p>

    <script src="https://code.jquery.com/jquery-3.1.1.js"
        integrity="sha384-VC7EHu0lDzZyFfmjTPJq+DFyIn8TUGAJbEtpXquazFVr00Q/OOx//RjiZ9yU9+9m"
        crossorigin="anonymous"></script>
    <script src="https://statics.teams.cdn.office.net/sdk/v1.6.0/js/MicrosoftTeams.min.js"
        integrity="sha384-mhp2E+BLMiZLe7rDIzj19WjgXJeI32NkPvrvvZBrMi5IvWup/1NUfS5xuYN5S3VT"
        crossorigin="anonymous"></script>
    <script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.17/js/adal.min.js"
        integrity="sha384-BIOS/65fbAsb2XiCCSTlZSTTl0ZgqkOU522dpyk5meOnN2EOQ3uH+QpqEtoAtmBn"
        crossorigin="anonymous"></script>

    <script type="text/javascript">
        microsoftTeams.initialize();

        // Trying to silently login using SSO
        showUserInformationUsingSSO();

        function showUserInformationUsingSSO() {
            var authTokenRequest = {
                successCallback: function (token) {
                    $('#btnSSO').hide();
                    $("#btnGraphAccess").hide();
                    showUserInformationInToken(token);
                    showUserProfileFromGraph(token);
                    showProfilesFromBot(token);
                },
                failureCallback: function (error) {
                    console.log('SSO failureCallback error: ', error);
                    $('#btnSSO').show();
                    showAuthError(error, "divError");
                }
            };
            microsoftTeams.authentication.getAuthToken(authTokenRequest);
        }

        // Login to Azure AD and get access to Microsoft Graph
        function loginV2() {
            microsoftTeams.authentication.authenticate({
                url: window.location.origin + "/tab/simple-start-v2",
                width: 600,
                height: 535,
                successCallback: function (result) {
                    // Wait 3 seconds to allow for any delays in AAD recording consent
                    setTimeout(() => showUserInformationUsingSSO(), 3000);
                },
                failureCallback: function (reason) {
                    console.log("Login failed: " + reason);
                    showAuthError(reason, "divGraphProfileError");
                }
            });
        }

        // Show the token and the user information that it has in its claims
        function showUserInformationInToken(accessToken) {
            $("#divRawAccessToken").text(accessToken).show();

            // The app can use the SSO token as proof of the user's identity.
            // The /api/decodeToken endpoint takes an access token in the Authorization header and validates it
            // as per (https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-token-and-claims).
            // If successful, it returns the decoded token. Otherwise it returns an HTTP 401 Unauthorized response.

            $.ajax({
                url: window.location.origin + "/api/decodeToken",
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + accessToken);
                },
                success: function (token) {
                    let claimsDiv = $("#divAccessTokenClaims");
                    claimsDiv.empty();

                    for (let claimId in token) {
                        $("<div>")
                            .append($("<b>").text(claimId + ": "))
                            .append($("<span>").text(token[claimId]))
                            .appendTo(claimsDiv);
                    }

                    $("#divAccessTokenClaims").show();
                    $("#divAccessTokenError").hide();
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    
                    $("#divAccessTokenError").text(errorThrown).show();
                    $("#divAccessTokenClaims").hide();
                },
            });
        }

        // Get the user's profile information
        function showUserProfileFromGraph(accessToken) {
            // The current implementation for SSO only grants consent for OpenID Connect scopes (email, profile, openid)
            // and offline_access, but not for other APIs. If your app needs further scopes, there are some workarounds to enable this.
            // This code prompts for user consent to additional scopes.

            // Through the Azure AD On-Behalf-Of flow, the app can exchange it for an access token for
            // other APIs that the user has consented to. In this example, the app gets a Graph token and
            // returns the user's full Azure AD profile.

            $.ajax({
                url: window.location.origin + "/api/getProfileFromGraph",
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + accessToken);
                },
                success: function (profile) {
                    let profileDiv = $("#divGraphProfile");
                    profileDiv.empty();

                    for (let key in profile) {
                        if ((key[0] !== "@") && profile[key]) {
                            $("<div>")
                                .append($("<b>").text(key + ": "))
                                .append($("<span>").text(profile[key]))
                                .appendTo(profileDiv);
                        }
                    }

                    $("#divGraphProfile").show();
                    $("#divGraphProfileError").hide();
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("Error getting profile: ", errorThrown);

                    // Extract the error from the response that the server sends
                    // If the error contains consent_required or interaction_required codes
                    // then we can ask the user to grant additional consent to access Microsoft Graph
                    let errorCode = xhr.responseText;
                    console.log("Error code from getProfileFromGraph: ", errorCode);

                    // Only show consent button for invalid_grant or interaction_required
                    if (errorCode === "invalid_grant" || errorCode === "interaction_required") {
                        $("#btnGraphAccess").show();
                    } else {
                        $("#divGraphProfileError").text(errorCode || "Error getting profile from Graph").show();
                    }

                    $("#divGraphProfile").hide();
                },
            });
        }

        function showProfilesFromBot(accessToken) {
            // C) The access token serves as verifiable evidence of the user's identity, in particular, it has
            // a claim of the user's Azure AD object id ("oid"). With the TID+OID as a key, the app can share
            // data betwen it's various capabilities (tab, bot, messaging extension). Here, the tab uses the
            // /api/getProfilesFromBot endpoint to show  profiles from the various services that the user has
            // signed in to via the bot.
            $.ajax({
                url: window.location.origin + "/api/getProfilesFromBot",
                beforeSend: function(request) {
                    request.setRequestHeader("Authorization", "Bearer " + accessToken);
                },
                success: function (profiles) {
                    let profilesDiv = $("#divBotProfiles");
                    profilesDiv.empty();

                    let profileNames = Object.keys(profiles).sort();
                    if (profileNames.length === 0) {
                        profilesDiv.text("No linked accounts.");
                    } else {
                        profileNames.forEach(profileName => {
                            profilesDiv.append($("<h3>").text(profileName));

                            let profile = profiles[profileName];
                            for (let key in profile) {
                                let value = profile[key];
                                if ((key[0] !== "@") && value) {
                                    $("<div>")
                                        .append($("<b>").text(key + ": "))
                                        .append($("<span>").text((value instanceof Object) ?  JSON.stringify(value) : value))
                                        .appendTo(profilesDiv);
                                }
                            }
                        });
                    }

                    $("#divBotProfiles").show();
                    $("#divBotProfilesError").hide();
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    $("#divBotProfilesError").text(errorThrown).show();
                    $("#divBotProfiles").hide();
                },
            });
        }

        // Show error information
        function showAuthError(reason, errorDivId) {
            $("#" + errorDivId).text(reason).show();
            $("#divProfile").hide();
        }
    </script>
</body>

</html>
